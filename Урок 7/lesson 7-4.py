# интерфейс
# декоратор

from abc import ABC, abstractmethod  # ABC - класс, который позволяет сделать родительский абстрактным

class Cats(ABC):
    @abstractmethod     # декоратор - нужен, чтобы у потомка было переопределение обязательства.
                        # При работе с функцией сначала срабатывает декоратор, потом - функция.
                        # (декоратор служит оберткой для функции).
                        # оборачивается только важный метод, который что-то вычисляет
    def roar(self):
        pass

    @abstractmethod
    def purr(self):
        pass


class Tiger(Cats):
    def roar(self):     # методы родителя с декоратором необходимо прописать и потомку, но уже без декоратора
        print("Arrr")

    def purr(self):     # методы родителя с декоратором необходимо прописать и потомку, но уже без декоратора
        print("Purr")

    def m_1(self):      # можно добавить и другие, новые методы
        print("Hrrr")

tiger = Tiger()